
I have installed express, express-generator as module in app; they can be installed globally using -g option.
npm install express
npm install express-generator
express // to create files,directories to start with; like routes, bin etc... IT DOESN'T INSTALL DEPENDENCIES IN PACKAGE.JSON
npm install // it reads package.json and installs all dependencies
npm info socket.io version // if you don't know the version of package and want to put in package.json file
// added nodejs.nbm plugin to netbeans for nodejs support
// removed jade and added ejs as it looks fine as template
/*
* when i first used mean init, then experss, it replaced package.json file cerated by mean. I guess we need to be careful while
* using express after mean.
* but if we use express init, then use mean init : it would be very bad it may over write many imp files of express
/

******* suggested directory structure for node + angular ******
// modify this structure accordingly
    - app.js
    - config
    ---------- db.js 
    ----- models/
    ---------- nerd.js <!-- the nerd model to handle CRUD -->
    ----- routes.js
    - node_modules <!-- created by npm install -->
    - public <!-- all frontend and angular stuff -->
    ----- css
    ----- js
    ---------- controllers <!-- angular controllers -->
    -------------------- MainCtrl.js
    -------------------- NerdCtrl.js
    ---------- services <!-- angular services -->
   -------------------- NerdService.js
    ---------- app.js <!-- angular application -->
    ---------- appRoutes.js <!-- angular routes -->
    ----- img
    ----- libs <!-- libs created by bower install -->
    ---------- angular
    ---------- angular-route
    ---------- bootstrap
    ---------- font-awesome
    ---------- jquery
    ----- views 
    ---------- pages
    ------------------- home.html
    ------------------- nerd.html
    ------------------- geek.html
    ------------------- index.html
    - routes <!-- routes for Node -->
    ----- ang.js
    ----- index.js
    ----- users.js
    - views <!-- views for requested routes( NOT for Angular ) -->
    ----- pages
    ------------------- about.ejs
    ------------------- ang.ejs
    ------------------- error.ejs
    ------------------- index.ejs
    ----- partials
    ------------------- footer.ejs
    ------------------- head.ejs
    ------------------- header.ejs
    - .bowerrc <!-- tells bower where to put files (public/libs) -->
    - bower.json <!-- tells bower which files we need -->
    - package.json <!-- tells npm which packages we need -->
    - server.js <!-- set up our node application -->


***** end directory structure for node+angular ******

/*
if we want to pass any variable to a function in other file, we can pass it with require statement.
eg: if we put routes in other file,
module.exports = function ( app ){
    app.get( --- );
    app.put( --- );
    app.post( --- );

    app.get('*', function(){ -- });
}

in server.js file we can load this module while passing it app using:
require('./routes')(app);

*/
